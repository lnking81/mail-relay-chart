{{- if and .Values.externalDns.enabled .Values.externalDns.autoManageDnsRecords }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "mail-relay.fullname" . }}-dns-manager
  labels:
    {{- include "mail-relay.labels" . | nindent 4 }}
spec:
  schedule: "*/{{ .Values.externalDns.ipCheckInterval | default 5 }} * * * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        metadata:
          annotations:
            {{- if .Values.dkim.enabled }}
            checksum/opendkim-config: {{ include (print $.Template.BasePath "/configmap-opendkim.yaml") . | sha256sum }}
            {{- end }}
          labels:
            {{- include "mail-relay.selectorLabels" . | nindent 12 }}
            job: dns-manager
        spec:
          restartPolicy: Never
          serviceAccountName: {{ include "mail-relay.serviceAccountName" . }}
          containers:
          - name: dns-manager
            image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
            command:
            - /bin/bash
            - -c
            - |
              echo "üîÑ DNS Manager CronJob - $(date)"
              echo "======================================"

              # Get the mail relay pod name
              POD_NAME=$(kubectl get pods -n {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }} | grep -E "{{ include "mail-relay.fullname" . }}-[a-f0-9]" | head -1 | awk '{print $1}' 2>/dev/null)

              if [ -z "$POD_NAME" ]; then
                echo "‚ùå Mail relay pod not found - will retry on next schedule"
                exit 0
              fi

              echo "üìß Found mail relay pod: $POD_NAME"

              # Check outbound IP from the mail relay pod
              echo "üåê Checking outbound IP from mail relay pod..."
              CURRENT_IP=""

              for service in "https://ifconfig.me/ip" "https://icanhazip.com" "https://ipv4.icanhazip.com"; do
                echo "Trying $service..."
                if IP=$(kubectl exec -n {{ .Release.Namespace }} "$POD_NAME" -- curl -s --connect-timeout 10 --max-time 30 "$service" 2>/dev/null); then
                  if echo "$IP" | grep -E '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$' >/dev/null; then
                    CURRENT_IP="$IP"
                    echo "‚úÖ Detected outbound IP: $CURRENT_IP"
                    break
                  fi
                fi
                echo "Failed to get valid IP from $service"
              done

              if [ -z "$CURRENT_IP" ]; then
                echo "‚ùå Failed to detect outbound IP - will retry on next schedule"
                exit 0
              fi

              # DNSEndpoint name
              DNSENDPOINT_NAME="{{ .Release.Name }}-dns"
              echo "üîç Checking DNSEndpoint: $DNSENDPOINT_NAME"

              {{- if and .Values.dkim.enabled .Values.dkim.autoGenerate }}
              # Extract DKIM records for all domains
              {{- range $index, $domain := .Values.mail.domains }}
              DKIM_RECORD_{{ $index }}=""
              if kubectl exec -n {{ $.Release.Namespace }} "$POD_NAME" -- test -f /data/dkim-keys/{{ $domain.name }}.txt 2>/dev/null; then
                echo "üîë Extracting DKIM record for {{ $domain.name }}..."
                DKIM_RECORD_{{ $index }}=$(kubectl exec -n {{ $.Release.Namespace }} "$POD_NAME" -- sh -c 'cat /data/dkim-keys/{{ $domain.name }}.txt | grep -v "^;" | tr -d "\n\t " | sed "s/.*TXT(//" | sed "s/).*$//" | tr -d "\""' 2>/dev/null || echo "")
                if [ -n "$DKIM_RECORD_{{ $index }}" ]; then
                  echo "‚úÖ Found DKIM record for {{ $domain.name }}"
                else
                  echo "‚ö†Ô∏è  DKIM record not ready for {{ $domain.name }}"
                fi
              else
                echo "‚ö†Ô∏è  DKIM key file not found for {{ $domain.name }}"
              fi
              {{- end }}
              {{- end }}

              # Check if DNSEndpoint exists
              if kubectl get dnsendpoint "$DNSENDPOINT_NAME" -n {{ .Release.Namespace }} >/dev/null 2>&1; then
                # DNSEndpoint exists, check if IP needs updating
                STORED_IP=$(kubectl get dnsendpoint "$DNSENDPOINT_NAME" -n {{ .Release.Namespace }} -o jsonpath='{.spec.endpoints[0].targets[0]}' 2>/dev/null || echo "")

                echo "üìä Current outbound IP: $CURRENT_IP"
                echo "üìä Stored DNS IP: $STORED_IP"

                if [ "$CURRENT_IP" != "$STORED_IP" ]; then
                  echo "üìù IP changed! Updating DNS records..."
                  kubectl delete dnsendpoint "$DNSENDPOINT_NAME" -n {{ .Release.Namespace }}
                  RECREATE_ENDPOINT=true
                else
                  echo "‚úÖ IP unchanged, no update needed"
                  RECREATE_ENDPOINT=false
                fi
              else
                echo "üÜï DNSEndpoint doesn't exist, creating new one..."
                RECREATE_ENDPOINT=true
              fi

              if [ "$RECREATE_ENDPOINT" = "true" ]; then
                echo "Creating comprehensive DNSEndpoint for all domains..."

                # Copy template and substitute variables
                cp /etc/dns-template/dnsendpoint-template.yaml /tmp/dnsendpoint.yaml
                
                # Replace IP variable
                sed -i "s/\${CURRENT_IP}/$CURRENT_IP/g" /tmp/dnsendpoint.yaml
                
                # Replace DKIM variables
                {{- range $index, $domain := .Values.mail.domains }}
                if [ -n "$DKIM_RECORD_{{ $index }}" ]; then
                  sed -i "s|\${DKIM_RECORD_{{ $index }}}|$DKIM_RECORD_{{ $index }}|g" /tmp/dnsendpoint.yaml
                fi
                {{- end }}

                echo "Generated DNSEndpoint YAML:"
                cat /tmp/dnsendpoint.yaml

                # Apply the DNSEndpoint
                kubectl apply -f /tmp/dnsendpoint.yaml

                # Clean up
                rm -f /tmp/dnsendpoint.yaml

                if [ $? -eq 0 ]; then
                  echo "‚úÖ Created/updated DNSEndpoint with all domains"
                else
                  echo "‚ùå Failed to create/update DNSEndpoint"
                fi
              fi

              echo "üéâ DNS management completed - $(date)"
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "500m"
            volumeMounts:
            - name: dnsendpoint-template
              mountPath: /etc/dns-template
              readOnly: true
          volumes:
          - name: dnsendpoint-template
            configMap:
              name: {{ include "mail-relay.fullname" . }}-dnsendpoint-template
{{- end }}
