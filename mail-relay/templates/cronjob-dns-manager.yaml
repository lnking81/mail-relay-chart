{{- if and .Values.externalDns.enabled .Values.externalDns.autoManageDnsRecords }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "mail-relay.fullname" . }}-dns-manager
  labels:
    {{- include "mail-relay.labels" . | nindent 4 }}
spec:
  schedule: "*/{{ .Values.externalDns.ipCheckInterval | default 5 }} * * * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "mail-relay.selectorLabels" . | nindent 12 }}
            job: dns-manager
        spec:
          restartPolicy: OnFailure
          serviceAccountName: {{ include "mail-relay.serviceAccountName" . }}
          containers:
          - name: dns-manager
            image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
            command:
            - /bin/bash
            - -c
            - |
              set -e

              echo "🔄 DNS Manager CronJob - $(date)"
              echo "======================================"

              # Get the mail relay pod name using the deployment name pattern
              POD_NAME=$(kubectl get pods -n {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }} | grep -E "{{ include "mail-relay.fullname" . }}-[a-f0-9]" | head -1 | awk '{print $1}' 2>/dev/null)

              if [ -z "$POD_NAME" ]; then
                echo "❌ Mail relay pod not found"
                exit 1
              fi

              echo "📧 Found mail relay pod: $POD_NAME"

              # Check outbound IP from the mail relay pod itself
              echo "🌐 Checking outbound IP from mail relay pod..."
              CURRENT_IP=""

              for service in "https://ifconfig.me/ip" "https://icanhazip.com" "https://ipv4.icanhazip.com"; do
                echo "Trying $service..."
                if IP=$(kubectl exec -n {{ .Release.Namespace }} "$POD_NAME" -- curl -s --connect-timeout 10 --max-time 30 "$service" 2>/dev/null); then
                  if echo "$IP" | grep -E '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$' >/dev/null; then
                    CURRENT_IP="$IP"
                    echo "✅ Detected outbound IP: $CURRENT_IP"
                    break
                  fi
                fi
                echo "Failed to get valid IP from $service"
              done

              if [ -z "$CURRENT_IP" ]; then
                echo "❌ Failed to detect outbound IP"
                exit 1
              fi

              # Check each DNSEndpoint and create/update if needed
              {{- range .Values.mail.domains }}
              DNSENDPOINT_NAME="{{ include "mail-relay.fullname" $ }}-dns-{{ .name | replace "." "-" }}"
              echo "🔍 Checking DNSEndpoint: $DNSENDPOINT_NAME"

              # Check if DNSEndpoint exists
              if kubectl get dnsendpoint "$DNSENDPOINT_NAME" -n {{ $.Release.Namespace }} >/dev/null 2>&1; then
                # DNSEndpoint exists, check if IP needs updating
                STORED_IP=$(kubectl get dnsendpoint "$DNSENDPOINT_NAME" -n {{ $.Release.Namespace }} -o jsonpath='{.spec.endpoints[0].targets[0]}' 2>/dev/null || echo "")

                echo "📊 Current outbound IP: $CURRENT_IP"
                echo "📊 Stored DNS IP: $STORED_IP"

                if [ "$CURRENT_IP" != "$STORED_IP" ]; then
                  echo "🔄 IP changed! Updating DNS records for {{ .name }}..."

                  # Update A record and SPF record
                  kubectl patch dnsendpoint "$DNSENDPOINT_NAME" -n {{ $.Release.Namespace }} --type='json' -p="[
                    {\"op\": \"replace\", \"path\": \"/spec/endpoints/0/targets/0\", \"value\": \"$CURRENT_IP\"},
                    {\"op\": \"replace\", \"path\": \"/spec/endpoints/2/targets/0\", \"value\": \"v=spf1 ip4:$CURRENT_IP a:{{ include "mail-relay.externalDnsHostname" $ }} ~all\"}
                  ]"

                  if [ $? -eq 0 ]; then
                    echo "✅ Updated DNS records for {{ .name }} with IP: $CURRENT_IP"
                  else
                    echo "❌ Failed to update DNS records for {{ .name }}"
                  fi
                else
                  echo "✅ IP unchanged for {{ .name }}, no update needed"
                fi
              else
                # DNSEndpoint doesn't exist, create it
                echo "🆕 Creating new DNSEndpoint for {{ .name }}..."

                # Get the deployment UID for owner reference
                DEPLOYMENT_UID=$(kubectl get deployment {{ include "mail-relay.fullname" $ }} -n {{ $.Release.Namespace }} -o jsonpath='{.metadata.uid}' 2>/dev/null || echo "")

                cat << EOF | kubectl apply -f -
              apiVersion: externaldns.k8s.io/v1alpha1
              kind: DNSEndpoint
              metadata:
                name: $DNSENDPOINT_NAME
                namespace: {{ $.Release.Namespace }}
                labels:
                  app.kubernetes.io/name: {{ include "mail-relay.name" $ }}
                  app.kubernetes.io/instance: {{ $.Release.Name }}
                  app.kubernetes.io/version: {{ $.Chart.AppVersion }}
                  app.kubernetes.io/managed-by: {{ $.Release.Service }}
                  helm.sh/chart: {{ include "mail-relay.chart" $ }}
                  dns-domain: {{ .name }}
              spec:
                endpoints:
                # A Record for mail server
                - dnsName: {{ $.Values.mail.hostname }}
                  recordTTL: {{ $.Values.externalDns.ttl }}
                  recordType: A
                  targets:
                  - "$CURRENT_IP"
                # MX Record
                - dnsName: {{ .name }}
                  recordTTL: {{ $.Values.externalDns.ttl }}
                  recordType: MX
                  targets:
                  - "10 {{ $.Values.mail.hostname }}"
                # SPF Record
                - dnsName: {{ .name }}
                  recordTTL: {{ $.Values.externalDns.ttl }}
                  recordType: TXT
                  targets:
                  - "v=spf1 ip4:$CURRENT_IP a:{{ $.Values.mail.hostname }} ~all"
                # DMARC Record
                - dnsName: _dmarc.{{ .name }}
                  recordTTL: {{ $.Values.externalDns.ttl }}
                  recordType: TXT
                  targets:
                  - "{{ $.Values.externalDns.dmarcPolicy }}"
              EOF
                if [ $? -eq 0 ]; then
                  echo "✅ Created DNSEndpoint for {{ .name }} with IP: $CURRENT_IP"
                else
                  echo "❌ Failed to create DNSEndpoint for {{ .name }}"
                fi
              fi
              {{- end }}

              echo "🎉 DNS management completed - $(date)"
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "500m"
{{- end }}
