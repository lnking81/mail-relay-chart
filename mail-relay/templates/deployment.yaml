apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mail-relay.fullname" . }}
  labels:
    {{- include "mail-relay.labels" . | nindent 4 }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "mail-relay.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/postfix-config: {{ include (print $.Template.BasePath "/configmap-postfix.yaml") . | sha256sum }}
        {{- if .Values.dkim.enabled }}
        checksum/opendkim-config: {{ include (print $.Template.BasePath "/configmap-opendkim.yaml") . | sha256sum }}
        {{- end }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "mail-relay.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "mail-relay.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if and .Values.externalDns.enabled .Values.externalDns.autoManageDnsRecords }}
        - name: ip-detector
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: curlimages/curl:latest
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Detecting external IP address..."

              # Try multiple services to detect external IP
              for service in "https://ifconfig.me/ip" "https://icanhazip.com" "https://ipv4.icanhazip.com"; do
                echo "Trying $service..."
                if IP=$(curl -s --connect-timeout 10 --max-time 30 "$service" 2>/dev/null); then
                  if echo "$IP" | grep -E '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$' >/dev/null; then
                    echo "Detected external IP: $IP"
                    echo "$IP" > /shared/external-ip
                    echo "$(date): External IP detected as $IP" >> /shared/ip-detection.log
                    exit 0
                  fi
                fi
                echo "Failed to get valid IP from $service"
              done

              echo "ERROR: Could not detect external IP address"
              echo "$(date): Failed to detect external IP" >> /shared/ip-detection.log
              echo "unknown" > /shared/external-ip
              exit 1
          volumeMounts:
            - name: shared-data
              mountPath: /shared
        {{- end }}
        - name: setup
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
            - |
              set -e

              # Packages are pre-installed in the custom Docker image
              echo "Using pre-built mail-relay image with packages already installed"

              # Set up postfix configuration
              cp /tmp/postfix-config/main.cf /etc/postfix/main.cf
              cp /tmp/postfix-config/master.cf /etc/postfix/master.cf

              {{- if .Values.mail.headerChecks.enabled }}
              cp /tmp/postfix-config/header_checks /etc/postfix/header_checks
              postmap /etc/postfix/header_checks
              {{- end }}

              {{- if and .Values.mail.relayCredentials.enabled .Values.mail.relayCredentials.username .Values.mail.relayCredentials.password }}
              cp /tmp/postfix-config/sasl_passwd /etc/postfix/sasl_passwd
              postmap /etc/postfix/sasl_passwd
              chmod 600 /etc/postfix/sasl_passwd*
              {{- end }}

              {{- if .Values.dkim.enabled }}
              # Set up OpenDKIM configuration
              cp /tmp/opendkim-config/opendkim.conf /etc/opendkim.conf
              cp /tmp/opendkim-config/TrustedHosts /etc/opendkim/TrustedHosts
              cp /tmp/opendkim-config/KeyTable /etc/opendkim/KeyTable
              cp /tmp/opendkim-config/SigningTable /etc/opendkim/SigningTable

              # Generate DKIM keys if they don't exist and auto-generation is enabled
              {{- if .Values.dkim.autoGenerate }}
              # Create DKIM keys directory
              mkdir -p /data/dkim-keys
              {{- range .Values.mail.domains }}
              if [ ! -f "/data/dkim-keys/{{ .name }}.private" ]; then
                echo "Generating DKIM key for {{ .name }}"
                opendkim-genkey -b {{ $.Values.dkim.keySize }} -s {{ .dkimSelector }} -d {{ .name }} -D /tmp
                mv /tmp/{{ .dkimSelector }}.private /data/dkim-keys/{{ .name }}.private
                mv /tmp/{{ .dkimSelector }}.txt /data/dkim-keys/{{ .name }}.txt
                echo "DKIM DNS record for {{ .name }}:"
                cat /data/dkim-keys/{{ .name }}.txt
              fi
              # Link the key to the expected location
              ln -sf /data/dkim-keys/{{ .name }}.private /etc/opendkim/keys/{{ .name }}.private
              {{- end }}
              {{- end }}

              # Set permissions (already configured in Dockerfile, but ensure they're correct)
              chown -R opendkim:opendkim /etc/opendkim/keys/
              chmod -R 700 /etc/opendkim/keys/
              chown -R opendkim:opendkim /var/run/opendkim
              {{- end }}

              # Set up postfix permissions
              chown -R postfix:postfix /var/spool/postfix

              echo "Setup completed successfully"

          volumeMounts:
            - name: postfix-config
              mountPath: /tmp/postfix-config
            {{- if .Values.dkim.enabled }}
            - name: opendkim-config
              mountPath: /tmp/opendkim-config
            {{- end }}
            {{- if .Values.persistence.enabled }}
            - name: data
              mountPath: /data
            {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
            - |
              set -e

              echo "=== Mail Relay Container Starting ==="
              echo "$(date): Container startup initiated"

              {{- if .Values.persistence.enabled }}
              # Set up persistent Postfix queue directory
              echo "$(date): Setting up persistent Postfix queue..."
              mkdir -p /data/postfix-spool

              # If this is the first run, copy the default Postfix spool structure
              if [ ! -f "/data/postfix-spool/.initialized" ]; then
                echo "$(date): Initializing Postfix queue structure..."
                cp -r /var/spool/postfix/* /data/postfix-spool/
                touch /data/postfix-spool/.initialized
                echo "$(date): Postfix queue structure initialized"
              else
                echo "$(date): Using existing persistent queue structure"
              fi

              # Mount the persistent queue directory
              echo "$(date): Linking persistent queue directory..."
              rm -rf /var/spool/postfix
              ln -sf /data/postfix-spool /var/spool/postfix

              # Set proper permissions
              chown -R postfix:postfix /data/postfix-spool
              echo "$(date): Persistent queue setup completed"
              {{- end }}

              # Configure Postfix for stdout logging
              echo "$(date): Configuring Postfix for stdout logging..."
              # Modify main.cf to disable syslog and use stdout
              echo "maillog_file = /dev/stdout" >> /etc/postfix/main.cf
              echo "maillog_file_prefixes = /dev" >> /etc/postfix/main.cf

              # Start rsyslog with configuration to forward to stdout
              echo "$(date): Starting rsyslog with stdout forwarding..."
              # Configure rsyslog to forward mail logs to stdout
              cat > /etc/rsyslog.d/49-stdout.conf << 'EOF'
              # Forward mail logs to stdout
              mail.*                          /proc/1/fd/1
              # Also log to files for compatibility
              mail.*                          -/var/log/mail.log
              EOF

              rsyslogd -n &
              RSYSLOG_PID=$!

              # Give rsyslog a moment to start
              sleep 2
              echo "$(date): Rsyslog started with PID $RSYSLOG_PID"

              {{- if .Values.dkim.enabled }}
              # Start OpenDKIM with stdout logging
              echo "$(date): Starting OpenDKIM with stdout logging..."
              # Configure OpenDKIM to log to stdout via syslog
              sed -i 's/^Syslog\s*.*/Syslog yes/' /etc/opendkim.conf || echo "Syslog yes" >> /etc/opendkim.conf
              sed -i 's/^SyslogSuccess\s*.*/SyslogSuccess yes/' /etc/opendkim.conf || echo "SyslogSuccess yes" >> /etc/opendkim.conf
              opendkim -f -v &
              OPENDKIM_PID=$!

              # Wait for OpenDKIM to start
              sleep 5
              echo "$(date): OpenDKIM started with PID $OPENDKIM_PID"
              {{- end }}

              # Start Postfix with foreground logging
              echo "$(date): Starting Postfix with stdout logging..."
              /usr/sbin/postfix start-fg &
              POSTFIX_PID=$!
              echo "$(date): Postfix started with PID $POSTFIX_PID"

              # Start a log monitoring process to ensure all logs go to stdout
              echo "$(date): Starting log monitoring..."
              (
                # Monitor mail logs and forward to stdout
                tail -F /var/log/mail.log /var/log/maillog /var/log/messages 2>/dev/null | while read line; do
                  echo "[MAIL-LOG] $line"
                done
              ) &
              LOG_MONITOR_PID=$!

              # Function to handle shutdown
              shutdown() {
                echo "$(date): Shutting down mail relay services..."
                {{- if .Values.dkim.enabled }}
                echo "$(date): Stopping OpenDKIM..."
                kill $OPENDKIM_PID 2>/dev/null || true
                {{- end }}
                echo "$(date): Stopping Postfix..."
                /usr/sbin/postfix stop
                kill $POSTFIX_PID 2>/dev/null || true
                echo "$(date): Stopping log monitor..."
                kill $LOG_MONITOR_PID 2>/dev/null || true
                echo "$(date): Stopping rsyslog..."
                kill $RSYSLOG_PID 2>/dev/null || true
                echo "$(date): Mail relay shutdown complete"
                exit 0
              }

              # Set up signal handlers
              trap 'shutdown' SIGTERM SIGINT

              echo "$(date): Mail relay services started successfully"
              echo "=== Monitoring mail relay processes ==="

              # Wait for processes
              wait $POSTFIX_PID
          ports:
            - name: smtp
              containerPort: {{ .Values.service.ports.smtp.port }}
              protocol: TCP
          {{- if .Values.healthCheck.enabled }}
          livenessProbe:
            tcpSocket:
              port: smtp
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.healthCheck.failureThreshold }}
          readinessProbe:
            tcpSocket:
              port: smtp
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            successThreshold: {{ .Values.healthCheck.successThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: postfix-config
              mountPath: /tmp/postfix-config
            - name: rsyslog-config
              mountPath: /etc/rsyslog.conf
              subPath: rsyslog.conf
            {{- if .Values.dkim.enabled }}
            - name: opendkim-config
              mountPath: /tmp/opendkim-config
            {{- end }}
            {{- if .Values.persistence.enabled }}
            - name: data
              mountPath: /data
            {{- end }}
            {{- if and .Values.externalDns.enabled .Values.externalDns.autoManageDnsRecords }}
            - name: shared-data
              mountPath: /shared
            {{- end }}
      volumes:
        {{- if and .Values.externalDns.enabled .Values.externalDns.autoManageDnsRecords }}
        - name: shared-data
          emptyDir: {}
        {{- end }}
        - name: postfix-config
          configMap:
            name: {{ include "mail-relay.fullname" . }}-postfix-config
        - name: rsyslog-config
          configMap:
            name: {{ include "mail-relay.fullname" . }}-rsyslog
        {{- if .Values.dkim.enabled }}
        - name: opendkim-config
          configMap:
            name: {{ include "mail-relay.fullname" . }}-opendkim-config
        {{- end }}
        {{- if .Values.persistence.enabled }}
        - name: data
          {{- if .Values.persistence.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim }}
          {{- else }}
          persistentVolumeClaim:
            claimName: {{ include "mail-relay.fullname" . }}-data
          {{- end }}
        {{- else }}
        - name: data
          emptyDir: {}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
